{"version":3,"sources":["components/Button.jsx","main/Calculator.jsx","components/Display.jsx","serviceWorker.js","index.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","Button","props","a","createElement","onClick","e","click","label","className","concat","operation","double","triple","initialState","displayValue","clearDisplay","values","current","Calculator","_this","Object","_home_romis_react_calculadora_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__","this","_home_romis_react_calculadora_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__","_home_romis_react_calculadora_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__","call","state","_home_romis_react_calculadora_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__","clearMemory","bind","_home_romis_react_calculadora_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_7__","setOperation","addDigit","setState","equals","currentOperation","_home_romis_react_calculadora_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__","eval","includes","i","newValue","parseFloat","console","log","_this2","react__WEBPACK_IMPORTED_MODULE_8___default","_components_Display__WEBPACK_IMPORTED_MODULE_11__","value","_components_Button__WEBPACK_IMPORTED_MODULE_10__","Component","Display","Boolean","window","location","hostname","match","ReactDOM","render","react_default","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0b4ed4d1.chunk.js","sourcesContent":["import React from 'react';\nimport './Button.css';\n\n\nconst Button = props => \n    <button onClick={e =>props.click && props.click(props.label)} className={`button ${props.operation ? 'operation' : ''} ${props.double ? 'double': ''} ${props.triple ? 'triple': ''}`}>{props.label}</button>\n\nexport default Button;\n","import React, { Component } from 'react';\nimport './Calculator.css';\nimport Button from '../components/Button';\nimport Display from '../components/Display';\nconst initialState = {\n    displayValue: '0',\n    clearDisplay: false,\n    operation: null,\n    values: [0, 0],\n    current: 0\n\n}\nclass Calculator extends Component {\n\n    state = { ...initialState }\n    constructor(props) {\n        super(props)\n        this.clearMemory = this.clearMemory.bind(this)\n        this.setOperation = this.setOperation.bind(this)\n        this.addDigit = this.addDigit.bind(this)\n    }\n\n    clearMemory() {\n        this.setState({ ...initialState })\n    }\n\n    setOperation(operation) {\n        if (this.state.current === 0) {\n            this.setState({ operation, current: 1, clearDisplay: true })\n        } else {\n            const equals = operation === '='\n            const currentOperation = this.state.operation\n\n            const values = [...this.state.values]\n            try {\n                values[0] = eval(`${values[0]} ${currentOperation} ${values[1]}`)\n                values[1] = 0\n            } catch (e) {\n                values[0] = this.state.values[0]\n            }\n\n\n\n            this.setState({\n                displayValue: values[0],\n                operation: equals ? null : operation,\n                current: equals ? 0 : 1,\n                clearDisplay: !equals,\n                values\n            })\n        }\n    }\n\n    addDigit(n) {\n        if (n === '.' && this.state.displayValue.includes('.')) {\n            return\n        }\n\n        const clearDisplay = this.state.displayValue === '0' || this.state.clearDisplay\n        const currentValue = clearDisplay ? '' : this.state.displayValue\n        const displayValue = currentValue + n\n        this.setState({ displayValue, clearDisplay: false })\n        if (n !== '.') {\n            const i = this.state.current\n            const newValue = parseFloat(displayValue)\n            const values = [...this.state.values]\n            values[i] = newValue\n            this.setState({ values })\n            console.log(values)\n        }\n    }\n\n    render() {\n\n        return (\n            <div className=\"calculator\">\n                <Display value={this.state.displayValue} />\n                <Button label=\"AC\" click={() => this.clearMemory()} triple />\n                <Button label=\"/\" click={this.setOperation} operation />\n                <Button label=\"7\" click={this.addDigit} />\n                <Button label=\"8\" click={this.addDigit} />\n                <Button label=\"9\" click={this.addDigit} />\n                <Button label=\"*\" click={this.setOperation} operation />\n                <Button label=\"4\" click={this.addDigit} />\n                <Button label=\"5\" click={this.addDigit} />\n                <Button label=\"6\" click={this.addDigit} />\n                <Button label=\"-\" click={this.setOperation} operation />\n                <Button label=\"1\" click={this.addDigit} />\n                <Button label=\"2\" click={this.addDigit} />\n                <Button label=\"3\" click={this.addDigit} />\n                <Button label=\"+\" click={this.setOperation} operation />\n                <Button label=\"0\" click={this.addDigit} double />\n                <Button label=\".\" click={this.addDigit} />\n                <Button label=\"=\" click={this.setOperation} operation />\n\n            </div>\n        )\n    }\n}\n\nexport default Calculator;","import React from 'react';\nimport './Display.css';\n\nconst Display = props => \n    <div className=\"display\">{props.value}</div>\n\n\nexport default Display;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Calculator from './main/Calculator';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n<div>\n   <h1>Calculadora</h1>\n   <Calculator />\n</div>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}